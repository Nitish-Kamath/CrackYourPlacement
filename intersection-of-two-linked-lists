https://leetcode.com/problems/intersection-of-two-linked-lists
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {

        ListNode *t1 = headA;
        ListNode *t2 = headB;

        int len1 = 0;
        int len2 = 0;

        while(t1)
        {
            len1++;
            t1 = t1 -> next;
        }

        while(t2)
        {
            len2++;
            t2 = t2 -> next;
        }

        int len = abs(len1 - len2);
        t1 = headA;
        t2 = headB;

        while(len)
        {
            if(len1 > len2)
            {
                t1 = t1 -> next;
                len--;
            }
            else 
            {
                t2 = t2 -> next;
                len--;
            }

        }

        while( t1 and t2 )
        {
            if(t1 == t2 )
            {
            return t1;
            }
             t2 = t2 -> next;   
             t1 = t1 -> next;
            
        }
        return NULL;


        
    }
};


/*
PS:
It is very Simple 
we are given two list and we have to just traverse the array 
and return from that index where value is intersecting

solution:
we will length of each linked list let l1 and l2
if l2 > l1 
l2 - l1 
just traverse l2 - l1 distance 
and will check where l1 -> val == l2 -> val return that address 


hack: find distance 


*/
