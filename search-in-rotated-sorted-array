https://leetcode.com/problems/search-in-rotated-sorted-array/submissions/1338355812/


class Solution {
public:
    int search(vector<int>& nums, int tg) {

        int start = 0;
        int end = nums.size() - 1;
        while(start <= end)
        {
            int mid = (start + end)/2;
            if(nums[mid] ==  tg)
            return mid;

            else if(nums[start] <= nums[mid])
            {
                if(tg>= nums[start] and tg < nums[mid])
                end = mid - 1; 
                else 
                start = mid + 1;
            }
            else 
            {
                if(tg > nums[mid] and tg <= nums[end])
                start = mid + 1;
                else 
                end = mid - 1;
            }
        }
        return -1;
    }
};


/*

ps: 
very simple 
we are given an nums array and it it rotated about some index let k 
such that every element from k to last become  in first half and 0 to k -1 lies in second half 


soln:

soln01:
using linear seach
if it is found return that index 
else return -1;
it is accepted 

soln02:
taking care of constraint, we have to solve in log(n) time complexity 
so here we will check if 
first half is sorted  or second half is sorted 

if first half is sorted then 
we will check if tg may lies in that range 
if yes end = mid - 1
else 
start = mid + 1 

if second half is sorted 
we will check if tg may lies in that range 
if yes start = mid + 1  
if no 
end = mid -1 

hack:
write all combination 
1 2 3 4 5 6 7 
2 3 4 5 6 7 1 
3 4 5 6 7 1 2 
4 5 6 7 1 2 3 
5 6 7 1 2 3 4 
6 7 1 2 3 4 5 
7 1 2 3 4 5 6 
1 2 3 4 5 6 7 

and now think of nums[start], nums[mid] and nums[end]
*/
