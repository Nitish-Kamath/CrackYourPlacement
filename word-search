https://leetcode.com/problems/word-search


class Solution {
    
    public:
     bool dfs(vector<vector<char>> &board, int i, int j, int count, string word)
      {
    int row = board.size();
   int col = board[0].size();

    if (count == word.length())
    {
        return true;
    }


    if (i < 0 || i >= row || j < 0 || j >= col || board[i][j] != word[count])
    {
        return false;
    }

    char temp = board[i][j];
    board[i][j] = '*';
    bool found = (dfs(board, i + 1, j, count + 1, word) ||
                  dfs(board, i - 1, j, count + 1, word) ||
                  dfs(board, i, j + 1, count + 1, word) ||
                  dfs(board, i, j - 1, count + 1, word));
    board[i][j] = temp;
    return found;
}
    
    
public:
    bool exist(vector<vector<char>>& board, string word) {
        
   int row = board.size();
   int col = board[0].size();

    for (int i = 0; i < row; i++)
    {
        for (int j = 0; j < col; j++)
        {
           
            if (board[i][j] == word[0] && dfs(board, i, j, 0, word))
            {
                return true;
            }
        }
    }
    return false;
}
        
       
        
    
};


/*

problem statment is very easy 
we are given a matrix of char 
and we are given a word
we have to check if word exists in that matrix or not 
it is given that we cann't use used letter more than once
it is also given that we can move horizonatally or vertically

solution:
will take first char of word 
and will check its occurence in matrix 
if found then we will run dfs call 
dfs will run in right, bottom, left, top 
if words' letter matches move forward and will check if all letter is used then return true

if not matches then do nothing 

if all traversal for first occurece of char doesn't matches will whole word then return false




*/
